<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- Configure annotated beans -->
    <context:annotation-config/>
    <context:component-scan base-package="com.bawatech.testproject.repository"/>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref bean="serviceSessionFactory"/>
        </property>
        <property name="nestedTransactionAllowed" value="true"></property>
    </bean>

    <bean id="serviceSessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"
          depends-on="dataSource">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <!-- Format the generated SQL statement to make it more readable, but takes up more screen space. -->
                <prop key="hibernate.format_sql">true</prop>
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.bawatech.testproject.model</value>
            </list>
        </property>
    </bean>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!-- JDBC Properties -->
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/testproject"/>
        <property name="user" value="root"/>
        <property name="password" value="admin"/>

        <!-- C3P0 Pool Properties -->
        <!-- number of milliseconds a client calling getConnection() will wait for a Connection to be checked-in or acquired when the pool is exhausted. Zero means wait indefinitely. -->
        <property name="checkoutTimeout" value="0"/>
        <!-- If this is a number greater than 0, c3p0 will test all idle, pooled but unchecked-out connections, every this number of seconds. -->
        <property name="idleConnectionTestPeriod" value="0"/>
        <!-- Seconds a Connection can remain pooled but unused before being discarded. Zero means idle connections never expire. -->
        <property name="maxIdleTime" value="0"/>
        <!-- Number of Connections a pool will try to acquire upon startup. Should be between minPoolSize and maxPoolSize. -->
        <property name="initialPoolSize" value="2"/>
        <!-- Minimum number of Connections a pool will maintain at any given time. -->
        <property name="minPoolSize" value="2"/>
        <!-- Maximum number of Connections a pool will maintain at any given time. -->
        <property name="maxPoolSize" value="5"/>
        <!-- If true, an operation will be performed asynchronously at every connection checkin to verify that the connection is valid.
            Use in combination with idleConnectionTestPeriod for quite reliable, always asynchronous Connection testing. -->
        <property name="testConnectionOnCheckin" value="false"/>
        <!-- If true, an operation will be performed at every connection checkout to verify that the connection is valid.  -->
        <property name="testConnectionOnCheckout" value="false"/>
        <!-- c3p0 is very asynchronous. Slow JDBC operations are generally performed by helper threads that don't hold contended locks.
        Spreading these operations over multiple threads can significantly improve performance by allowing multiple operations to be performed simultaneously.  -->
        <property name="numHelperThreads" value="3"/>

        <!-- Fixed Properties -->
        <!-- Defines the query that will be executed for all connection tests -->
        <property name="preferredTestQuery" value="SELECT 1"/>
        <!-- Defines how many times c3p0 will try to acquire a new Connection from the database before giving up.
            If this value is less than or equal to zero, c3p0 will keep trying to fetch a Connection indefinitely. -->
        <property name="acquireRetryAttempts" value="5"/>
        <!-- Milliseconds, time c3p0 will wait between acquire attempts. -->
        <property name="acquireRetryDelay" value="10000"/>
        <!-- The JDBC spec is unforgivably silent on what should happen to unresolved, pending transactions on Connection close.
            Since the spec is absurdly unclear on this question, application authors who wish to avoid bugs
            and inconsistent behavior should ensure that all transactions are explicitly either committed or rolled-back before close is called.-->
        <property name="autoCommitOnClose" value="false"/>
        <!-- Determines how many connections at a time c3p0 will try to acquire when the pool is exhausted. -->
        <property name="acquireIncrement" value="2"/>
        <!-- The size of c3p0's global PreparedStatement cache. If both maxStatements and maxStatementsPerConnection are zero, statement caching will not be enabled.
            If maxStatements is zero but maxStatementsPerConnection is a non-zero value, statement caching will be enabled, but no global limit will be enforced,
            only the per-connection maximum. maxStatements controls the total number of Statements cached, for all Connections.
            If set, it should be a fairly large number, as each pooled Connection requires its own, distinct flock of cached statements.
            As a guide, consider how many distinct PreparedStatements are used frequently in your application,
            and multiply that number by maxPoolSize to arrive at an appropriate value.
            Though maxStatements is the JDBC standard parameter for controlling statement caching,
            users may find c3p0's alternative maxStatementsPerConnection more intuitive to use. -->
        <property name="maxStatements" value="0"/>
        <!-- Read maxStatements comment -->
        <property name="maxStatementsPerConnection" value="0"/>
        <!-- Number of seconds that Connections in excess of minPoolSize should be permitted to remain idle in the pool before being culled.
        Intended for applications that wish to aggressively minimize the number of open Connections, shrinking the pool back towards minPoolSize
        if, following a spike, the load level diminishes and Connections acquired are no longer needed.
        If maxIdleTime is set, maxIdleTimeExcessConnections should be smaller if the parameter is to have any effect.
        Zero means no enforcement, excess Connections are not idled out.  -->
        <property name="maxIdleTimeExcessConnections" value="3600"/>
    </bean>
</beans>